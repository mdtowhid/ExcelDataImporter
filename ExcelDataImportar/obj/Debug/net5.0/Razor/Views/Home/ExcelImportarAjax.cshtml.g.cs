#pragma checksum "C:\Users\hp\Documents\GitHub\ExcelDataImportar\ExcelDataImportar\Views\Home\ExcelImportarAjax.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4df25c87cf8247e7b3a9af1204ee9a88f125e65d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_ExcelImportarAjax), @"mvc.1.0.view", @"/Views/Home/ExcelImportarAjax.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\hp\Documents\GitHub\ExcelDataImportar\ExcelDataImportar\Views\_ViewImports.cshtml"
using ExcelDataImportar;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\hp\Documents\GitHub\ExcelDataImportar\ExcelDataImportar\Views\_ViewImports.cshtml"
using ExcelDataImportar.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4df25c87cf8247e7b3a9af1204ee9a88f125e65d", @"/Views/Home/ExcelImportarAjax.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"45e78bb3b16d4d8d0b3e52ef15cd3aa036e68d5e", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_ExcelImportarAjax : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\hp\Documents\GitHub\ExcelDataImportar\ExcelDataImportar\Views\Home\ExcelImportarAjax.cshtml"
  
    ViewData["Title"] = "Excel Importar Ajax";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""row"">
    <div class=""col-md-2""></div>
    <div class=""col-md-5"">
        <div class=""mb-3"">
            <label for=""formFileSm"" class=""form-label"">Select File</label>
            <input class=""form-control form-control"" id=""formFileSm"" type=""file"">
        </div>
        <div>
            <input id=""btnSubmit"" type=""button"" value=""Preview Excel"" class=""btn btn-sm btn-primary"" />
            <input id=""btnImport"" type=""button"" value=""Import"" class=""btn btn-sm btn-success d-none ml-2"" />
        </div>
    </div>
    <div class=""col-md-2 d-none"" id=""sheetsWrapper"">
        <label>Sheets</label>
        <select id=""sheets"" class=""form-control""></select>
    </div>
</div>

<div id=""previewGrid"" class=""row mt-3""></div>

<script>
    const formFileSm = document.getElementById('formFileSm');
    const btnSubmit = document.getElementById('btnSubmit');
    const btnImport = document.getElementById('btnImport');
    const previewGrid = document.getElementById('previewGrid');
  ");
            WriteLiteral("  const sheetsWrapper = document.getElementById(\'sheetsWrapper\');\r\n    const sheets = document.getElementById(\'sheets\');\r\n    const url = \'");
#nullable restore
#line 33 "C:\Users\hp\Documents\GitHub\ExcelDataImportar\ExcelDataImportar\Views\Home\ExcelImportarAjax.cshtml"
            Write(Url.Action("ExcelImportarAjax","Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\';\r\n    const url1 = \'");
#nullable restore
#line 34 "C:\Users\hp\Documents\GitHub\ExcelDataImportar\ExcelDataImportar\Views\Home\ExcelImportarAjax.cshtml"
             Write(Url.Action("PreviewOrImportExcel","Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
    let extractedData = null;
    let importarDto = new FormData();
    formFileSm.addEventListener('change', (e) => {
        var files = e.target.files;
        sheetsWrapper.classList.add('d-none')
        btnImport.classList.add('d-none');
        if (files.length > 0) {
            const file = files[0];
            importarDto = new FormData();
            importarDto.append('file', file);
            importarDto.append('Worksheet', 'Sheet1');
        }
    });
    sheets.addEventListener('change', (e) => {
        importarDto.delete('Worksheet');
        importarDto.append('Worksheet', sheets.value);
            previewGrid.innerHTML = `<i>Loading</>`;
        Axios.postDataWithFile(url, importarDto, 'json', (data) => {
            if (!data.hasError) {
                btnImport.classList.remove('d-none');
                extractedData = data;
                let list = data.auditDataList;
                let importarDto1 = {
                    auditDataList: list,
        ");
            WriteLiteral(@"        };
                let importarDto1Json = JSON.stringify(importarDto1)

                Axios.postData(url1, {
                    importarDto1: JSON.stringify(importarDto1)
                }, 'HTML', (grid) => {
                    previewGrid.classList.remove('error');
                    previewGrid.innerHTML = grid;
                });
            } else {
                previewGrid.classList.add('error');
                previewGrid.innerHTML = data.errorText;
            }
        });
    });
    btnSubmit.addEventListener('click', (e) => {
        previewGrid.innerHTML = `<i>Loading</>`;
        Axios.postDataWithFile(url, importarDto, 'json', (data) => {
            let options = ``;
            
            if (!data.hasError) {
                let workSheets = data.worksheets;
                let list = data.auditDataList;
                let importarDto1 = {
                    auditDataList: list,
                    totalCount: list.length,
                };
 ");
            WriteLiteral(@"               let importarDto1Json = JSON.stringify(importarDto1);
                btnImport.classList.remove('d-none');
                sheetsWrapper.classList.remove('d-none');
                extractedData = data;
                workSheets.forEach((v, i) => {
                    options += `<option value=""${v}"">${v}</option>`
                });
                sheets.innerHTML = options;

                Axios.postData(url1, {
                    importarDto1: JSON.stringify(importarDto1)
                }, 'HTML', (grid) => {
                    previewGrid.classList.remove('error');
                    previewGrid.innerHTML = grid;
                });
            } else {
                previewGrid.classList.add('error');
                previewGrid.innerHTML = data.errorText;
            }
        });
    });
    btnImport.addEventListener('click', (e) => {
        previewGrid.innerHTML = `<i>Loading</>`;
        
        let importarDto1 = {
            auditDataList: extra");
            WriteLiteral(@"ctedData.auditDataList,
            forImport: true
        };

        Axios.postData(url1, {
            importarDto1: JSON.stringify(importarDto1)
        }, 'HTML', (grid) => {
            previewGrid.classList.remove('error');
            previewGrid.innerHTML = grid;
        });
    });
</script>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
